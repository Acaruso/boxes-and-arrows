- App is "object composition root"
    - objects are instantiated inside App
    - then some objects are injected into other objects

- State object stores current state of input devices (keyboard and mouse)
    - should rename this to InputState or InputDeviceState
    - also stores previous state
        - previous state == state from one frame in the past
        - this can be useful for computing mouse movement deltas, or other things (maybe?)

- Ui object handles input from keyboard and mouse
    - should rename this to Controller or InputHandler
    - creates event listeners
    - when user uses keyboard or mouse, event listeners are triggered
        - event listeners update data in Model

- Model stores application data
    - contains other objects, like Boxes for example
    - a decent amount of logic is contained here
    - goal is to try to put app logic here to seperate it from input handling code and rendering code

- Renderer is a set of stateless functions to draw stuff to the screen
    - takes data from Model as input
    - produces draw commands as output
    - draw commands are appended to a queue inside Gfx object
    - also note that Renderer contains some logic
        - it decides what to draw or not draw based on the data in Model and State
        - see drawLine function for example

- Gfx is graphics system, handles actual drawing
    - makes calls to HTML Canvas
    - manages z-axis by sorting draw commands by z-axis and then drawing them in order

- one of the general ideas is to seperate the drawing code from other code
    - in typical OOP code, an object "knows" how to do various things
    - for example, it might know how to draw itself to the screen
    - however, in this project, an object, for example, Box, is decoupled from drawing logic
    - Box object doesn't know anything about drawing to the screen, or handling user input
