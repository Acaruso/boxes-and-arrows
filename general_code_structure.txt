- App is "object composition root"
    - other objects are instantiated inside App
    - then some of them are injected into each other

- State object stores current state of input devices (keyboard and mouse)
    - should probably rename this to InputState or InputDeviceState
    - also stores previous state
        - previous state == state from one frame in the past
        - this can be useful for computing mouse movement deltas, or other things (maybe?)

- Ui object handles input from keyboard and mouse
    - should probably rename this to Controller or InputHandler
    - creates event listeners
    - when user does stuff with keyboard or mouse, event listeners are triggered
        - event listeners update data in Model

- Model stores application data
    - contains other objects like Boxes for ex
    - a decent amount of logic is contained here
    - try to put logic here to seperate it from messy input handling code and rendering code

- Renderer is a set of "stateless" functions to draw stuff to the screen
    - takes data from model as input
    - produces draw commands as output
    - draw commands are appended to a queue inside Gfx object
    - also note that Renderer contains some logic -> it decides what to draw or not draw
      based on the data in Model and State
        - see drawLine function

- Gfx is graphics system, handles actual drawing
    - makes calls to HTML canvas to draw stuff
    - manages z-axis by sorting draw commands by z-axis and then drawing them in order

- one of the key ideas here is to seperate the "drawing" code from the other code
    - in typical OOP code, an object "knows" how to do various things
    - for example, it might know how to draw itself to the screen
    - however, in this code, an object, for example, Box, is decoupled from drawing logic
